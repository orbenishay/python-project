{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "name": "Untitled1.ipynb",
      "provenance": [],
      "collapsed_sections": [],
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/orbenishay/python-project/blob/master/Task3\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "FnsQ2qaMIONH",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "import re\n",
        "text1 = ['To Sherlock1 Holmes she is always the woman.', 'I have seldom heard him mention her under any other name.']\n",
        "\n",
        "def rowparser(text):\n",
        "  word_dict = {} # create an empty dictionary \n",
        "\n",
        "  for row_num, sentence in enumerate(text): #enumerate(text) creates a list of tuples of the form [(1, <string in row1>),(2, <string in row2>)]\n",
        "     words_list = sentence.split()\n",
        "     \n",
        "  return word_dict\n",
        "\n",
        "\n",
        "    # loop over words\n",
        "    # enumerate words\n",
        "    # apply regex\n",
        "    # set dictionary value\n",
        "\n",
        "\n",
        "\n",
        "  # match = re.search('1', row)\n",
        "  # print(match)\n",
        "  \n"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "mcNvxG1gIZIK",
        "colab_type": "text"
      },
      "source": [
        "**Task3 - Pars input text**:\n",
        "\n",
        "\n",
        "1.  Use lower() and split() functions in order to insert the words into list and separate\n",
        "2.  Input: text1 (dictionary of strings)\n",
        "3.  Ignore words starting with capital letters except for 1st word in sentence\n",
        "4.  Ignore decimal\n",
        "5.  Remove special charachters\n",
        "6.  Output:\n",
        "dictionary where key is Tuple (row, letter) and value is word and if is normal or ignored\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n"
      ]
    }
  ]
}