{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "name": "Untitled2.ipynb",
      "provenance": [],
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/orbenishay/python-project/blob/master/Task0_Class\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "IMsyazBaZJGt",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "# OOP (object oriented programing)\n",
        "class, attribute, method, instance, object,  param\n",
        "class Table:\n",
        "    def __init__(self, fields): #initialize the class\n",
        "        self.fields = fields\n",
        "        self.n_fields = len(fields)\n",
        "        self.records = []\n",
        "        self.n_records = 0\n",
        "\n",
        "# ‘Init’ it the constructor of the class. Creates an instance of the class Instance\n",
        "# Object has methods and has attributes\n",
        "\n",
        "class Student:\n",
        "    def __init__(self, name, id_number, grades={}):\n",
        "    # or def __init__(self, name, id_number, grades=dict()):\n",
        "        self.name = name\n",
        "        self.id_number = id_number\n",
        "        self.grades = grades\n",
        "s1 = Student('Yosi', 1, {'Math':[92,99]})\n",
        "s2 = Student('Dor', 1, {'Math':[88,30]})\n",
        " \n",
        "print(s1)\n",
        "print(s1.grades)\n",
        "\n",
        "# Methods:\n",
        "class Table:\n",
        "    def __init__(self, fields):\n",
        "        self.fields = fields\n",
        "        self.n_fields = len(fields)\n",
        "        self.records = []\n",
        "        self.n_records = 0\n",
        "    \n",
        "    def add_record(self, rec):\n",
        "        self.records.append(rec)\n",
        "        self.n_records += 1\n",
        " \n",
        "    def took_test (self, subject, grade):\n",
        "        self.grade[subject].append(grade)"
      ],
      "execution_count": 0,
      "outputs": []
    }
  ]
}